# README - Tarea 2

En primer lugar, se definen las variables `priority` y `boost` en la estructura del proceso dentro del archivo `proc.h`, para su posterior inicialización. En `proc.c`, inicializamos estas variables con los valores 0 y 1, respectivamente, en base a las indicaciones del documento de la tarea.

Posteriormente, modificamos la función `scheduler()` en el archivo `proc.c`. En esta función, implementamos la lógica para aumentar y disminuir la prioridad al recorrer la lista de procesos disponibles. La ejecución de un proceso se prioriza según su valor de `priority`, con el objetivo que los procesos de mayor prioridad se ejecuten lo más pronto posible. Cada vez que se crea un nuevo proceso, se actualizan las prioridades de los procesos en ejecución (a excepcion de aquellos en estado zombie) de acuerdo con la lógica del `boost`.

Finalmente, se creó el archivo `priority.c` en la carpeta `USER`, donde creamos un número específico de procesos hijos basado en la entrada del usuario, utilizando el comando: `$ priority (número de procesos)`. Al ejecutarse, el programa imprime la información de los procesos en ejecución, incluyendo su ID, valor de prioridad y boost. Además, es importante destacar que el proceso padre espera a que todos los procesos hijos finalicen antes de salir del bucle.

Adicionalmente, cabe mencionar que se modificaron los siguientes archivos: proc.h, proc.c, user.h, Makefile, usys.pl, sysproc.c, syscall.c, syscall.h . 

Se incorpora el "Screenshot procesos.png" para evidenciar el uso de la función "priority 20", indicada en el documento de la tarea. 

Los conflictos de mayor relevancia para realizar este trabajo fueron respecto a la función scheduler(), dado que se presentaron diversos errores como panic:acquire y panic:kerneltrap, los cuales me tuvieron mucho rato haciendo troubleshooting. 